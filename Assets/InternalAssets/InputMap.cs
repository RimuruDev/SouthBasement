//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InternalAssets/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TheRat
{
    public partial class @InputMap : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputMap()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""CharacterContoller"",
            ""id"": ""923f7c07-c26c-4a7a-90fc-50960fcf9b85"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2ad15012-3315-4272-be08-8222b30c024a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""1bb2dbc9-40f1-4828-aeed-f2e4887e804f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Movement"",
                    ""id"": ""45a276c7-67e2-476f-a44a-edec97e82b3d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1dd74dc0-552a-4dce-abbb-060b6559aa35"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6b6bfecb-e3bb-4760-b8fc-4892fed72ed0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""303a04c2-30de-471b-a90f-5d60998c7cd9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7baeb80f-d32e-44c2-baf5-f9fd50f3e9b7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f79aad85-9565-4907-917c-a6d71d9980ae"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CharacterContoller
            m_CharacterContoller = asset.FindActionMap("CharacterContoller", throwIfNotFound: true);
            m_CharacterContoller_Move = m_CharacterContoller.FindAction("Move", throwIfNotFound: true);
            m_CharacterContoller_Attack = m_CharacterContoller.FindAction("Attack", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CharacterContoller
        private readonly InputActionMap m_CharacterContoller;
        private ICharacterContollerActions m_CharacterContollerActionsCallbackInterface;
        private readonly InputAction m_CharacterContoller_Move;
        private readonly InputAction m_CharacterContoller_Attack;
        public struct CharacterContollerActions
        {
            private @InputMap m_Wrapper;
            public CharacterContollerActions(@InputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_CharacterContoller_Move;
            public InputAction @Attack => m_Wrapper.m_CharacterContoller_Attack;
            public InputActionMap Get() { return m_Wrapper.m_CharacterContoller; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterContollerActions set) { return set.Get(); }
            public void SetCallbacks(ICharacterContollerActions instance)
            {
                if (m_Wrapper.m_CharacterContollerActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_CharacterContollerActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_CharacterContollerActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_CharacterContollerActionsCallbackInterface.OnMove;
                    @Attack.started -= m_Wrapper.m_CharacterContollerActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_CharacterContollerActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_CharacterContollerActionsCallbackInterface.OnAttack;
                }
                m_Wrapper.m_CharacterContollerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                }
            }
        }
        public CharacterContollerActions @CharacterContoller => new CharacterContollerActions(this);
        public interface ICharacterContollerActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
        }
    }
}
